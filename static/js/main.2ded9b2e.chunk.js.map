{"version":3,"sources":["Components/Form.js","Components/Recipes.js","App.js","Components/Recipe.js","Components/Router.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getRecipe","style","marginBottom","className","type","name","Recipes","recipes","map","recipe","key","recipe_id","src","image_url","alt","title","length","concat","substring","publisher","Link","to","pathname","state","API_KEY","App","_callee","e","recipeName","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","sent","json","_this","setState","console","log","stop","this","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","stringify","setItem","Components_Form","Components_Recipes","Component","Recipe","activeRecipe","req","res","location","href","publisher_url","Router","HashRouter","Switch","Route","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","Components_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ded9b2e.chunk.js","sourcesContent":["/**\n * @Author: Ali\n * @Date:   2018-12-15T16:44:03+01:00\n * @Last modified by:   Ali\n * @Last modified time: 2018-12-18T08:35:31+01:00\n */\nimport React from 'react'\n\n//a stateless functional Component\nconst Form = props => (\n  <form onSubmit={props.getRecipe} style={{ marginBottom:\"2rem\" }}>\n    {/* using name attribute for now, must change later*/}\n    <input\n      className=\"form__input\"\n      type=\"text\"\n      name=\"recipeName\"/>\n    <button className=\"form__button\"> Search </button>\n  </form>\n)\nexport default Form\n","/**\n * @Author: Ali\n * @Date:   2018-12-16T14:09:47+01:00\n * @Last modified by:   Ali\n * @Last modified time: 2019-01-12T11:49:40+01:00\n */\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nconst Recipes = props => (\n  <div className=\"container\">\n    <div className=\"row\">\n      {props.recipes.map(recipe => {\n        return (\n          <div\n            key={recipe.recipe_id}\n            className=\"col-md-4\"\n            style={{ marginBottom: \"2rem\" }}\n          >\n            <div className=\"recipes__box\">\n              <img\n                className=\"recipe__box-img\"\n                src={recipe.image_url}\n                alt={recipe.title}\n              />\n              <div className=\"recipe__text\">\n                <h5 className=\"recipes__title\">\n                  {recipe.title.length < 20\n                    ? `${recipe.title}`\n                    : `${recipe.title.substring(0, 25)}...`}\n                </h5>\n                <p className=\"recipes__subtitle\">\n                  Publisher: <span> {recipe.publisher}</span>\n                </p>\n              </div>\n              <button className=\"recipe_buttons\">\n                <Link\n                  to={{\n                    pathname: `/recipe/${recipe.recipe_id}`,\n                    state: { recipe: recipe.title }\n                  }}\n                >\n                  View Recipe\n                </Link>\n              </button>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  </div>\n);\nexport default Recipes;\n","/**\n * @Author: Ali\n * @Date:   2018-12-15T13:27:09+01:00\n * @Last modified by:   Ali\n * @Last modified time: 2019-01-12T12:14:08+01:00\n */\nimport React, { Component } from \"react\";\nimport Form from \"./Components/Form\";\nimport Recipes from \"./Components/Recipes\";\nimport \"./App.css\";\n\nconst API_KEY = \"d6e5954a2b386a35dd8b85fbe821fa80\";\n\nclass App extends Component {\n  state = {\n    recipes: []\n  };\n  /*new way to write methods with arrow-function\n    -no need to bind it to (this)-\n  */\n  getRecipe = async e => {\n    e.preventDefault();\n    //we grap the input text from the input element \"recipeName\"\n    const recipeName = e.target.elements.recipeName.value;\n    // added https://cors-anywhere.herokuapp.com/ because the site won't allow local servers to access their data\n    const api_call = await fetch(\n      `https://cors-anywhere.herokuapp.com/https://www.food2fork.com/api/search?key=${API_KEY}&q=${recipeName}`\n    );\n    //we call .json() on the api_call instead of using\n    // JSON.parse/stringfy\n    // and we store the results in this data constant\n    const data = await api_call.json();\n    this.setState({ recipes: data.recipes });\n    console.log(this.state.recipes);\n  };\n  componentDidMount = () => {\n    const json = localStorage.getItem(\"recipes\");\n    if (json === null) {\n      return;\n    } else {\n      const recipes = JSON.parse(json);\n      this.setState({ recipes });\n    }\n  };\n  componentDidUpdate = () => {\n    const recipes = JSON.stringify(this.state.recipes);\n    localStorage.setItem(\"recipes\", recipes);\n  };\n  render() {\n    if (this.state.recipes === null) {\n      return <h1> Loading </h1>;\n    } else {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1 className=\"app-title\"> Recipe Search </h1>\n          </header>\n          <Form getRecipe={this.getRecipe} />\n          <Recipes recipes={this.state.recipes} />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","/**\n * @Author: Ali\n * @Date:   2018-12-18T10:52:56+01:00\n * @Last modified by:   Ali\n * @Last modified time: 2018-12-20T08:53:34+01:00\n */\nimport React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nconst API_KEY = \"d6e5954a2b386a35dd8b85fbe821fa80\"\nclass Recipe extends Component {\n  state = {\n    activeRecipe: []\n  }\n  componentDidMount = async () => {\n    const title = this.props.location.state.recipe\n    const req = await fetch(`https://cors-anywhere.herokuapp.com/https://www.food2fork.com/api/search?key=${API_KEY}&q=${title}`)\n    const res = await req.json()\n    this.setState({\n      activeRecipe:res.recipes[0]\n    })\n    console.log(res.recipes);\n  }\n  render(){\n    const recipe = this.state.activeRecipe\n    return (\n    <div className=\"container\">\n      { this.state.activeRecipe.length !== 0 &&\n        <div className=\"active-recipe\">\n          <img\n            className=\"active-recipe__img\"\n            src={recipe.image_url}\n            alt={recipe.title} />\n          <h3 className=\"active-recipe__title\">\n            {recipe.title}\n          </h3>\n          <h4 className=\"active-recipe__publisher\">\n            Publisher: <span> { recipe.publisher } </span>\n          </h4>\n          <p className=\"active-recipe__website\"> Website:\n            <span> <a href={recipe.publisher_url}>{recipe.publisher_url}</a>\n            </span>\n          </p>\n          <button className=\"active-recipe__button\">\n            <Link to=\"/\"> Go Home </Link>\n          </button>\n        </div>\n      }\n    </div>\n    )\n  }\n}\nexport default Recipe\n","/**\n * @Author: Ali\n * @Date:   2018-12-18T09:19:33+01:00\n * @Last modified by:   Ali\n * @Last modified time: 2019-01-12T12:08:51+01:00\n */\nimport React from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport App from \"../App\";\nimport Recipe from \"./Recipe\";\n\nconst Router = () => (\n  <HashRouter>\n    <Switch>\n      <Route path=\"/\" component={App} exact />\n      <Route path=\"/recipe/:id\" component={Recipe} />\n    </Switch>\n  </HashRouter>\n);\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * @Author: Ali\n * @Date:   2018-12-16T14:09:02+01:00\n * @Last modified by:   Ali\n * @Last modified time: 2018-12-18T10:55:23+01:00\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './Components/Router';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}